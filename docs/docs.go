// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/my/profile": {
            "get": {
                "description": "user profile",
                "tags": [
                    "User"
                ],
                "summary": "user profile"
            }
        },
        "/api/v1/sign-in": {
            "post": {
                "description": "user login",
                "tags": [
                    "User"
                ],
                "summary": "user login"
            }
        },
        "/api/v1/sign-up": {
            "post": {
                "description": "user register",
                "tags": [
                    "User"
                ],
                "summary": "user register"
            }
        },
        "/api/v1/tasks": {
            "get": {
                "description": "get task list",
                "tags": [
                    "Task"
                ],
                "summary": "get task list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.Task"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "create a task",
                "tags": [
                    "Task"
                ],
                "summary": "creates a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer 31a165ba1be6dec616b1f8f3207b4273",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "JSON数据",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Task"
                        }
                    }
                ]
            }
        },
        "/api/v1/tasks/:id": {
            "get": {
                "description": "get task detail",
                "tags": [
                    "Task"
                ],
                "summary": "get task detail"
            }
        },
        "/api/v1/tasks/:task_id": {
            "put": {
                "description": "update a task",
                "tags": [
                    "Task"
                ],
                "summary": "updates a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer 31a165ba1be6dec616b1f8f3207b4273",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "JSON数据",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Task"
                        }
                    }
                ]
            }
        },
        "/api/v1/tasks/:task_id/runs": {
            "get": {
                "description": "get task run list",
                "tags": [
                    "Task"
                ],
                "summary": "get task run list"
            }
        },
        "/api/v1/tasks/:task_id/runs/:run_id": {
            "get": {
                "description": "get run detail",
                "tags": [
                    "Task"
                ],
                "summary": "get run detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Run"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks/:task_id/runs/:run_id/log": {
            "get": {
                "description": "get run log with websocket",
                "tags": [
                    "Task"
                ],
                "summary": "get run log with websocket"
            }
        },
        "/api/v1/tasks/:task_id/triggers": {
            "get": {
                "description": "get trigger list",
                "tags": [
                    "Trigger"
                ],
                "summary": "get trigger list"
            },
            "post": {
                "description": "add a trigger",
                "tags": [
                    "Trigger"
                ],
                "summary": "add a trigger"
            }
        },
        "/api/v1/tasks/:task_id/triggers/:trigger_id": {
            "put": {
                "description": "update a trigger",
                "tags": [
                    "Trigger"
                ],
                "summary": "update a trigger"
            }
        },
        "/api/v1/tasks/:task_id/triggers/:trigger_id/runs": {
            "post": {
                "description": "create a run for task",
                "tags": [
                    "Task"
                ],
                "summary": "creates a run for task"
            }
        }
    },
    "definitions": {
        "executor.ExeLog": {
            "type": "object",
            "properties": {
                "line": {
                    "description": "行内容",
                    "type": "string"
                },
                "output_at": {
                    "description": "输出时间",
                    "type": "string"
                },
                "type": {
                    "description": "内容类型，0标准输出，1标准错误输出",
                    "type": "integer"
                }
            }
        },
        "request.Task": {
            "type": "object",
            "properties": {
                "bash_content": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "run_on": {
                    "type": "string"
                }
            }
        },
        "response.Run": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "exit_code": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/executor.ExeLog"
                    }
                },
                "name": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "time_elapse_second": {
                    "type": "integer"
                }
            }
        },
        "response.Task": {
            "type": "object",
            "properties": {
                "bash": {
                    "type": "string"
                },
                "cron": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_run": {
                    "$ref": "#/definitions/response.Run"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
